#ifndef MYLLY_GLINC
#define MYLLY_GLINC

// -------------------------------------------------------------------------------------------------
// Render queues
// -------------------------------------------------------------------------------------------------

#define BACKGROUND 0
#define GEOMETRY 1
#define TRANSPARENT 2
#define OVERLAY 3

// -------------------------------------------------------------------------------------------------
// Shader uniforms
// -------------------------------------------------------------------------------------------------

#define MAT_MVP	0 // Model-view-projection matrix
#define MAT_MODEL 1 // Model matrix
#define MAT_VIEW 2 // View matrix
#define MAT_PROJECTION 3 // Projection matrix
#define NUM_MAT_UNIFORMS 4

#define VEC_VIEW_POSITION 0 // The position of the rendered view (camera)
#define VEC_TIME 1 // 4-element vector containing time (see core/time.h)
#define VEC_SCREEN 2 // Screen size in pixels
#define VEC_COLOUR 3 // Colour of the mesh. For lit materials this is the ambient colour
#define NUM_VEC_UNIFORMS 4

#define SAMPLER_MAIN 0 // Main sampler (usually diffuse texture)
#define SAMPLER_NORMAL 1 // Normal map texture
#define NUM_SAMPLER_UNIFORMS 2

uniform mat4 MatrixArr[NUM_MAT_UNIFORMS];
uniform vec4 VectorArr[NUM_VEC_UNIFORMS];
uniform sampler2D SamplerArr[NUM_SAMPLER_UNIFORMS];

mat4      MatrixMVP() { return MatrixArr[MAT_MVP]; }
mat4      MatrixModel() { return MatrixArr[MAT_MODEL]; }
mat4      MatrixView() { return MatrixArr[MAT_VIEW]; }
mat4      MatrixProjection() { return MatrixArr[MAT_PROJECTION]; }

vec3      ObjWorldPosition() { mat4 m = MatrixModel(); return vec3(m[3][0], m[3][1], m[3][2]); }
vec3      CameraRight() { mat4 m = MatrixView(); return vec3(m[0][0], m[1][0], m[2][0]); }
vec3      CameraUp() { mat4 m = MatrixView(); return vec3(m[0][1], m[1][1], m[2][1]); }
vec3      CameraForward() { mat4 m = MatrixView(); return vec3(m[0][2], m[1][2], m[2][2]); }

#define   TextureMain() (SamplerArr[SAMPLER_MAIN])
#define   TextureNormalMap() (SamplerArr[SAMPLER_NORMAL])

vec3      ViewPosition() { return VectorArr[VEC_VIEW_POSITION].xyz; }
vec2      ScreenResolution() { return VectorArr[VEC_SCREEN].xy; }

float     Time() { return VectorArr[VEC_TIME].x; }
float     CosTime() { return VectorArr[VEC_TIME].y; }
float     SinTime() { return VectorArr[VEC_TIME].z; }
float     DeltaTime() { return VectorArr[VEC_TIME].w; }

// -------------------------------------------------------------------------------------------------
// Vertex attributes
// -------------------------------------------------------------------------------------------------

#if defined(VERTEX_SHADER)

#ifdef VERTEX_UI
	// Attributes for UI widget quads.
	attribute vec2 Vertex;
	attribute vec4 Colour;
	attribute vec2 TexCoord;
#else
	// Attributes for normal vertices
	attribute vec3 Vertex;
	attribute vec3 Normal;
	attribute vec3 Tangent;
	attribute vec2 TexCoord;
#endif

#ifdef VERTEX_PARTICLE
	// Attributes for particles
	attribute vec3 ParticleCentre;
	attribute vec4 ParticleEmitPosition;
	attribute vec4 Colour;
	attribute float ParticleSize;
#endif

#endif

// -------------------------------------------------------------------------------------------------
// Utility macros and functions
// -------------------------------------------------------------------------------------------------

// Alpha cutout macro.
#define alphacut(a, cutoff)\
{\
	if ((a) < (cutoff)) { discard; }\
}

// Snap vertices to match the pixels on the screen to avoid sub-pixel wiggling.
vec4 pixelsnap(vec4 pos)
{
	// Convert vertex position to pixels and round the result.
	vec2 halfScreen = 0.5 * ScreenResolution();
	vec2 pixelPos = round((pos.xy / pos.w) * halfScreen);

	// Convert back to normalized coordinates.
	pos.xy = pixelPos / halfScreen * pos.w;

	return pos;
}

// Helper method to convert an object space position to clip space homogenous coordinates.
vec4 toclipspace(vec3 vertex)
{
	return MatrixMVP() * vec4(vertex, 1.0);
}

// Same as above but for 2D screen space coordinates (UI).
vec4 toclipspace2(vec2 vertex)
{
	return MatrixMVP() * vec4(vertex, 0.0, 1.0);
}

// Transpose a matrix.
mat3 transpose(mat3 m)
{
	return mat3(m[0][0], m[1][0], m[2][0],
                m[0][1], m[1][1], m[2][1],
                m[0][2], m[1][2], m[2][2]);
}

// Invert a matrix.
mat3 inverse(mat3 m)
{
	float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
	float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
	float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

	float b01 = a22 * a11 - a12 * a21;
	float b11 = -a22 * a10 + a12 * a20;
	float b21 = a21 * a10 - a11 * a20;

	float det = a00 * b01 + a01 * b11 + a02 * b21;

	return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
                b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
                b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;
}

#endif // MYLLY_GLINC
