#ifndef MYLLY_GLINC
#define MYLLY_GLINC

// -------------------------------------------------------------------------------------------------
// Render queues
// -------------------------------------------------------------------------------------------------

#define BACKGROUND 0
#define GEOMETRY 1
#define TRANSPARENT 2
#define OVERLAY 3

// -------------------------------------------------------------------------------------------------
// Shader uniforms
// -------------------------------------------------------------------------------------------------

#define MAT_MVP	0 // Model-view-projection matrix
#define MAT_MODEL 1 // Model matrix
#define MAT_VIEW 2 // View matrix
#define MAT_PROJECTION 3 // Projection matrix
#define MAT_USER 4 // User defined uniform matrices
#define MAT_USER2 5
#define MAT_USER3 6
#define MAT_USER4 7
#define NUM_MAT_UNIFORMS 8

#define VEC_VIEW_POSITION 0 // The position of the rendered view (camera)
#define VEC_TIME 1 // 4-element vector containing time (see core/time.h)
#define VEC_SCREEN 2 // Screen size in pixels
#define VEC_USER1 3 // User defined uniform data vectors
#define VEC_USER2 4
#define VEC_USER3 5
#define VEC_USER4 6
#define VEC_USER5 7
#define VEC_USER6 8
#define NUM_VEC_UNIFORMS 9

#define SAMPLER_MAIN 0 // Main sampler (usually diffuse texture)
#define NUM_SAMPLER_UNIFORMS 1

uniform mat4 MatrixArr[NUM_MAT_UNIFORMS];
uniform vec4 VectorArr[NUM_VEC_UNIFORMS];
uniform sampler2D SamplerArr[NUM_SAMPLER_UNIFORMS];

// -------------------------------------------------------------------------------------------------
// Vertex attributes
// -------------------------------------------------------------------------------------------------

#if defined(VERTEX_SHADER)

#ifdef VERTEX_UI
	// Attributes for UI widget quads.
	attribute vec2 Vertex;
	attribute vec4 Colour;
	attribute vec2 TexCoord;
#else
	// Attributes for normal vertices
	attribute vec3 Vertex;
	attribute vec3 Normal;
	attribute vec2 TexCoord;
#endif

#ifdef VERTEX_PARTICLE
	// Attributes for particles
	attribute vec3 ParticleCentre;
	attribute vec4 Colour;
	attribute float ParticleSize;
#endif

#endif

// -------------------------------------------------------------------------------------------------
// Lighting variables and helpers
// -------------------------------------------------------------------------------------------------

#ifdef APPLY_LIGHTING

#define MAX_LIGHTS_PER_MESH 4

uniform int NumLights;
uniform mat4 LightArr[MAX_LIGHTS_PER_MESH];

#endif

// -------------------------------------------------------------------------------------------------
// Utility macros and functions
// -------------------------------------------------------------------------------------------------

// Alpha cutout macro.
#define alphacut(a, cutoff)\
{\
	if ((a) < (cutoff)) { discard; }\
}

// Snap vertices to match the pixels on the screen to avoid sub-pixel wiggling.
vec4 pixelsnap(vec4 pos)
{
	// Convert vertex position to pixels and round the result.
	vec2 halfScreen = 0.5 * VectorArr[VEC_SCREEN].xy;
	vec2 pixelPos = round((pos.xy / pos.w) * halfScreen);

	// Convert back to normalized coordinates.
	pos.xy = pixelPos / halfScreen * pos.w;

	return pos;
}

// Helper method to convert an object space position to clip space homogenous coordinates.
vec4 toclipspace(vec3 vertex)
{
	return MatrixArr[MAT_MVP] * vec4(vertex, 1.0);
}

// Same as above but for 2D screen space coordinates (UI).
vec4 toclipspace2(vec2 vertex)
{
	return MatrixArr[MAT_MVP] * vec4(vertex, 0.0, 1.0);
}

// Transpose a matrix.
mat3 transpose(mat3 m)
{
	return mat3(m[0][0], m[1][0], m[2][0],
                m[0][1], m[1][1], m[2][1],
                m[0][2], m[1][2], m[2][2]);
}

// Invert a matrix.
mat3 inverse(mat3 m)
{
	float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
	float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
	float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

	float b01 = a22 * a11 - a12 * a21;
	float b11 = -a22 * a10 + a12 * a20;
	float b21 = a21 * a10 - a11 * a20;

	float det = a00 * b01 + a01 * b11 + a02 * b21;

	return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
                b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
                b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;
}

#endif // MYLLY_GLINC
#line 1
